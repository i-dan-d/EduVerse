/**
 * üì± PWA Install Manager
 * Qu·∫£n l√Ω vi·ªác c√†i ƒë·∫∑t PWA tr√™n m√°y t√≠nh v√† ƒëi·ªán tho·∫°i
 */

class PWAInstallManager {
    constructor() {
        this.deferredPrompt = null;
        this.installButton = null;
        this.isInstalled = false;
        this.init();
    }

    init() {
        // Ki·ªÉm tra xem ƒë√£ c√†i ƒë·∫∑t ch∆∞a
        this.checkIfInstalled();
        
        // T·∫°o n√∫t c√†i ƒë·∫∑t
        this.createInstallButton();
        
        // L·∫Øng nghe s·ª± ki·ªán beforeinstallprompt
        this.listenForInstallPrompt();
        
        // L·∫Øng nghe s·ª± ki·ªán ƒë√£ c√†i ƒë·∫∑t
        this.listenForInstalled();
        
        // C·∫≠p nh·∫≠t UI theo tr·∫°ng th√°i
        this.updateUI();
    }

    checkIfInstalled() {
        // Ki·ªÉm tra xem c√≥ ƒëang ch·∫°y trong PWA mode kh√¥ng
        if (window.matchMedia('(display-mode: standalone)').matches || 
            window.navigator.standalone === true ||
            document.referrer.includes('android-app://')) {
            this.isInstalled = true;
        }
    }

    createInstallButton() {
        // T·∫°o n√∫t c√†i ƒë·∫∑t cho header
        const installBtnHTML = `
            <button id="installBtn" class="install-btn" style="display: none;">
                <i class="fas fa-download"></i>
                <span class="install-text">C√†i ƒë·∫∑t App</span>
                <div class="install-badge">PWA</div>
            </button>
        `;

        // Th√™m v√†o navigation
        const navContainer = document.querySelector('.nav-container');
        if (navContainer) {
            navContainer.insertAdjacentHTML('beforeend', installBtnHTML);
            this.installButton = document.getElementById('installBtn');
            
            // Th√™m event listener
            this.installButton.addEventListener('click', () => this.handleInstallClick());
        }

        // T·∫°o install card cho mobile
        this.createMobileInstallPrompt();
    }

    createMobileInstallPrompt() {
        const mobilePromptHTML = `
            <div id="mobileInstallPrompt" class="mobile-install-prompt" style="display: none;">
                <div class="mobile-install-content">
                    <div class="mobile-install-icon">
                        <i class="fas fa-mobile-alt"></i>
                    </div>
                    <div class="mobile-install-text">
                        <h4>C√†i ƒë·∫∑t EduVerse</h4>
                        <p>Th√™m v√†o m√†n h√¨nh ch√≠nh ƒë·ªÉ truy c·∫≠p nhanh</p>
                    </div>
                    <div class="mobile-install-actions">
                        <button class="mobile-install-btn" onclick="pwaManager.handleInstallClick()">
                            <i class="fas fa-plus"></i>
                            C√†i ƒë·∫∑t
                        </button>
                        <button class="mobile-dismiss-btn" onclick="pwaManager.dismissMobilePrompt()">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', mobilePromptHTML);
    }

    listenForInstallPrompt() {
        window.addEventListener('beforeinstallprompt', (e) => {
            console.log('üíæ PWA install prompt available');
            
            // NgƒÉn kh√¥ng cho tr√¨nh duy·ªát hi·ªÉn th·ªã prompt m·∫∑c ƒë·ªãnh
            e.preventDefault();
            
            // L∆∞u event ƒë·ªÉ s·ª≠ d·ª•ng sau
            this.deferredPrompt = e;
            
            // Hi·ªÉn th·ªã n√∫t c√†i ƒë·∫∑t
            this.showInstallButton();
            
            // Hi·ªÉn th·ªã mobile prompt n·∫øu l√† mobile
            if (this.isMobile()) {
                this.showMobilePrompt();
            }
        });
    }

    listenForInstalled() {
        window.addEventListener('appinstalled', (e) => {
            console.log('‚úÖ PWA ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t');
            this.isInstalled = true;
            this.hideInstallButton();
            this.showInstallSuccessMessage();
            
            // Reset deferred prompt
            this.deferredPrompt = null;
        });
    }

    async handleInstallClick() {
        if (!this.deferredPrompt) {
            console.log('‚ùå Kh√¥ng c√≥ install prompt');
            this.showInstallInstructions();
            return;
        }

        try {
            // Hi·ªÉn th·ªã loading
            this.showInstallLoading();
            
            // Hi·ªÉn th·ªã prompt c√†i ƒë·∫∑t
            this.deferredPrompt.prompt();
            
            // ƒê·ª£i ng∆∞·ªùi d√πng ph·∫£n h·ªìi
            const { outcome } = await this.deferredPrompt.userChoice;
            
            if (outcome === 'accepted') {
                console.log('‚úÖ Ng∆∞·ªùi d√πng ch·∫•p nh·∫≠n c√†i ƒë·∫∑t');
                this.showInstallSuccessMessage();
            } else {
                console.log('‚ùå Ng∆∞·ªùi d√πng t·ª´ ch·ªëi c√†i ƒë·∫∑t');
                this.hideInstallLoading();
            }
            
            // Reset deferred prompt
            this.deferredPrompt = null;
            
        } catch (error) {
            console.error('‚ùå L·ªói khi c√†i ƒë·∫∑t PWA:', error);
            this.hideInstallLoading();
            this.showInstallError();
        }
    }

    showInstallButton() {
        if (this.installButton && !this.isInstalled) {
            this.installButton.style.display = 'flex';
            this.installButton.classList.add('install-available');
        }
    }

    hideInstallButton() {
        if (this.installButton) {
            this.installButton.style.display = 'none';
            this.installButton.classList.remove('install-available');
        }
    }

    showMobilePrompt() {
        const mobilePrompt = document.getElementById('mobileInstallPrompt');
        if (mobilePrompt && !this.isInstalled) {
            // Hi·ªÉn th·ªã sau 3 gi√¢y
            setTimeout(() => {
                mobilePrompt.style.display = 'block';
                mobilePrompt.classList.add('show');
            }, 3000);
        }
    }

    dismissMobilePrompt() {
        const mobilePrompt = document.getElementById('mobileInstallPrompt');
        if (mobilePrompt) {
            mobilePrompt.classList.remove('show');
            setTimeout(() => {
                mobilePrompt.style.display = 'none';
            }, 300);
        }
    }

    showInstallLoading() {
        if (this.installButton) {
            const icon = this.installButton.querySelector('i');
            const text = this.installButton.querySelector('.install-text');
            
            icon.className = 'fas fa-spinner fa-spin';
            text.textContent = 'ƒêang c√†i ƒë·∫∑t...';
            this.installButton.disabled = true;
        }
    }

    hideInstallLoading() {
        if (this.installButton) {
            const icon = this.installButton.querySelector('i');
            const text = this.installButton.querySelector('.install-text');
            
            icon.className = 'fas fa-download';
            text.textContent = 'C√†i ƒë·∫∑t App';
            this.installButton.disabled = false;
        }
    }

    showInstallSuccessMessage() {
        this.showNotification('‚úÖ ƒê√£ c√†i ƒë·∫∑t th√†nh c√¥ng!', 'success');
        this.hideInstallButton();
        this.dismissMobilePrompt();
    }

    showInstallError() {
        this.showNotification('‚ùå C√≥ l·ªói khi c√†i ƒë·∫∑t. Vui l√≤ng th·ª≠ l·∫°i!', 'error');
    }

    showInstallInstructions() {
        const instructions = this.getInstallInstructions();
        this.showNotification(instructions, 'info', 8000);
    }

    getInstallInstructions() {
        const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
        const isAndroid = /Android/.test(navigator.userAgent);
        const isChrome = /Chrome/.test(navigator.userAgent);
        
        if (isIOS) {
            return 'üì± Tr√™n iOS: Nh·∫•n n√∫t Share ‚Üí "Add to Home Screen"';
        } else if (isAndroid) {
            return 'üì± Tr√™n Android: Nh·∫•n menu (‚ãÆ) ‚Üí "Add to Home screen"';
        } else if (isChrome) {
            return 'üíª Tr√™n Chrome: Nh·∫•n menu (‚ãÆ) ‚Üí "Install EduVerse"';
        } else {
            return 'üí° S·ª≠ d·ª•ng Chrome ho·∫∑c Edge ƒë·ªÉ c√†i ƒë·∫∑t app v·ªÅ m√°y';
        }
    }

    showNotification(message, type = 'info', duration = 5000) {
        // T·∫°o notification
        const notification = document.createElement('div');
        notification.className = `install-notification ${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-message">${message}</span>
                <button class="notification-close" onclick="this.parentElement.parentElement.remove()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // Hi·ªÉn th·ªã
        setTimeout(() => notification.classList.add('show'), 100);
        
        // T·ª± ƒë·ªông ·∫©n
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        }, duration);
    }

    updateUI() {
        // C·∫≠p nh·∫≠t UI d·ª±a tr√™n tr·∫°ng th√°i c√†i ƒë·∫∑t
        if (this.isInstalled) {
            this.hideInstallButton();
            console.log('‚úÖ App ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t');
        }
    }

    isMobile() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }

    // API c√¥ng khai
    static getInstance() {
        if (!window.pwaManagerInstance) {
            window.pwaManagerInstance = new PWAInstallManager();
        }
        return window.pwaManagerInstance;
    }
}

// Kh·ªüi t·∫°o PWA Manager khi DOM ƒë√£ s·∫µn s√†ng
document.addEventListener('DOMContentLoaded', () => {
    window.pwaManager = PWAInstallManager.getInstance();
});

// Export cho s·ª≠ d·ª•ng module
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PWAInstallManager;
}
